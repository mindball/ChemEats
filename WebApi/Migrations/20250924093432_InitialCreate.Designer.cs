// <auto-generated />
using System;
using Domain;
using FirebirdSql.EntityFrameworkCore.Firebird.Metadata;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace WebApi.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250924093432_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Fb:ValueGenerationStrategy", FbValueGenerationStrategy.IdentityColumn)
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 31);

            modelBuilder.Entity("Domain.Entities.Employee", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("CHAR(16) CHARACTER SET OCTETS");

                    b.Property<string>("Abbreviation")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("VARCHAR(10)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("VARCHAR(100)");

                    b.HasKey("Id");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("Domain.Entities.Meal", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("CHAR(16) CHARACTER SET OCTETS");

                    b.Property<Guid?>("MenuId")
                        .HasColumnType("CHAR(16) CHARACTER SET OCTETS");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("VARCHAR(100)");

                    b.HasKey("Id");

                    b.HasIndex("MenuId");

                    b.ToTable("Meals");
                });

            modelBuilder.Entity("Domain.Entities.MealOrder", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("CHAR(16) CHARACTER SET OCTETS");

                    b.Property<DateTime>("Date")
                        .HasColumnType("TIMESTAMP");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("CHAR(16) CHARACTER SET OCTETS");

                    b.Property<Guid>("MealId")
                        .HasColumnType("CHAR(16) CHARACTER SET OCTETS");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId", "MealId", "Date")
                        .IsUnique();

                    b.ToTable("MealOrders");
                });

            modelBuilder.Entity("Domain.Entities.Menu", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("CHAR(16) CHARACTER SET OCTETS");

                    b.Property<DateTime>("Date")
                        .HasColumnType("TIMESTAMP");

                    b.Property<Guid>("SupplierId")
                        .HasColumnType("CHAR(16) CHARACTER SET OCTETS");

                    b.HasKey("Id");

                    b.HasIndex("SupplierId");

                    b.ToTable("Menus");
                });

            modelBuilder.Entity("Domain.Entities.Supplier", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("CHAR(16) CHARACTER SET OCTETS");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("VARCHAR(100)");

                    b.HasKey("Id");

                    b.ToTable("Suppliers");
                });

            modelBuilder.Entity("Domain.Entities.Meal", b =>
                {
                    b.HasOne("Domain.Entities.Menu", null)
                        .WithMany("Meals")
                        .HasForeignKey("MenuId");

                    b.OwnsOne("Domain.Entities.Price", "Price", b1 =>
                        {
                            b1.Property<Guid>("MealId")
                                .HasColumnType("CHAR(16) CHARACTER SET OCTETS");

                            b1.Property<decimal>("Amount")
                                .HasPrecision(10, 2)
                                .HasColumnType("DECIMAL(18,2)");

                            b1.HasKey("MealId");

                            b1.ToTable("Meals");

                            b1.WithOwner()
                                .HasForeignKey("MealId");
                        });

                    b.Navigation("Price")
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.MealOrder", b =>
                {
                    b.HasOne("Domain.Entities.Employee", null)
                        .WithMany("Orders")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.Menu", b =>
                {
                    b.HasOne("Domain.Entities.Supplier", null)
                        .WithMany("Menus")
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.Employee", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("Domain.Entities.Menu", b =>
                {
                    b.Navigation("Meals");
                });

            modelBuilder.Entity("Domain.Entities.Supplier", b =>
                {
                    b.Navigation("Menus");
                });
#pragma warning restore 612, 618
        }
    }
}
